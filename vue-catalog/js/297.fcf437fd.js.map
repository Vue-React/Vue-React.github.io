{"version":3,"file":"js/297.fcf437fd.js","mappings":"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","sources":["webpack://vue-catalog/./src/components/MultiUpload.vue","webpack://vue-catalog/./src/data/languages/notifications/MultiUploadData.js","webpack://vue-catalog/./src/components/MultiUpload.vue?30c5"],"sourcesContent":["<template>\r\n    <div class=\"graybg\">\r\n        \r\n        <div v-if=\"$store.state.updProd.pictures\"\r\n            :class=\"['pl-15 smooth', ($store.state.updProd.pictures.length > 0) && 'picsArrBg pt-15 pb-8 smooth-show' ]\" >\r\n            <ul >\r\n                <li v-for=\"item in $store.state.updProd.pictures\"\r\n                    :key=\"item\"\r\n                    :class=\"['flex-list', item.includes('_COPY') && 'orange']\"\r\n                    >\r\n                    <a :href=\" define.pathToUploads + '/' + item \" target='_blank' rel='noreferrer noopener' title=''\r\n                        ><img :src=\" define.prevFolder2 + item \" class=\"prev\" alt=\"\"></a>\r\n                    <div class='picName'>\r\n                        <a :href=\" define.pathToUploads + '/' + item \" target='_blank' rel='noreferrer noopener' title='Открыть в новой вкладке'\r\n                        >{{ (item.length > maxNameLength) ? item.substr(0, maxNameLength - 13) + ' ... ' + item.substr(-8, 8) : item }}\r\n                        </a>\r\n                    </div>\r\n\r\n                    <div class='delPic'\r\n                        @click=\"preparePicToDelete(item)\"><img :src=\" define.pathToGraphics + '/delete2_20px.png' \" alt=''/></div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n        \r\n        <div class=\"multiSelect mb-15\">\r\n            <div class=\"flex mr-15\">\r\n                <input type=\"file\" id=\"files\" ref=\"files\" accept=\".png, .jpg, .jpeg, .gif\" multiple @change=\"handleFilesUpload()\"/>\r\n                <br>\r\n                <button\r\n                    :disabled=\"uplBtnBlock\"\r\n                    @click=\"submitFiles()\"\r\n                >{{ uploadButton }}</button>\r\n            </div>\r\n            \r\n            <div :class=\"[ 'smooth', isInProgress && 'smooth-show', '']\">\r\n                <div class=\"mt-20 mb-10\">\r\n                    {{ uploadPercentage }} % <br>\r\n                    <div class=\"progress\">\r\n                    <div class=\"progress-bar\" :style=\"{ width: + uploadPercentage + '%' }\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <transition name=\"fade\">\r\n                <div v-show=\"newPics.length > 0 ? true : false\" class=\"mt-10 mb-10\">{{ uploadedFiles }} ({{ newPics.length }}):</div>\r\n            </transition>\r\n            <ul class=\"pl-15\">\r\n            <transition-group name=\"list\">\r\n                <li v-for=\"item in newPics\"\r\n                    :key=\"item\"\r\n                    :class=\"['flex-list', item.includes('_COPY') && 'orange']\">\r\n                    <img :src=\" define.prevFolder + item\" class=\"prev\" alt=\"\">\r\n                    <div class='picName'>\r\n                        {{ item.length > maxNameLength ? item.substr(0, maxNameLength - 13) + ' ... ' + item.substr(-8, 8) : item }} \r\n                    </div>\r\n                    <div class='delPic'\r\n                        @click=\"deleteNewPics(item)\"\r\n                        ><img :src=\" define.pathToGraphics + '/delete2_20px.png' \" alt=''/></div> \r\n                </li>\r\n            </transition-group>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nimport { define, maxNameLength } from '@/data/globals.js'\r\nimport useNotify from '@/hooks/useNotify'\r\nimport notifys from '@/data/languages/notifications/MultiUploadData'\r\nimport useLang from '@/hooks/useLang'\r\n\r\nexport default {\r\nprops: {\r\n    uploadButton: {\r\n        type: String,\r\n        default: 'Загрузить',\r\n    },\r\n    uploadedFiles: {\r\n        type: String,\r\n        default: 'Загружены файлы',\r\n    },\r\n},\r\ndata(){\r\n    return {\r\n        files: '',\r\n        newPics: [],\r\n        picsToDelete: [],\r\n        isInProgress: false,\r\n        uploadPercentage: 0,\r\n        uplBtnBlock: true,\r\n    }\r\n},\r\nmethods: {\r\n    // Закрыто или открыто окно выбора файлов\r\n    handleFilesUpload(){\r\n        this.files = this.$refs.files.files;\r\n        this.isInProgress = true\r\n        // console.log('this.$refs.files.files.length: ', this.$refs.files.files.length);\r\n        // Если выбраны файлы, то кнопку \"загрузить\" можно разблокировать\r\n        if(this.$refs.files.files.length > 0) this.uplBtnBlock = false\r\n        else this.uplBtnBlock = true\r\n    },\r\n    // Загрузка файлов\r\n    async submitFiles(){\r\n        this.uploadPercentage = 0\r\n        this.uplBtnBlock = true\r\n\r\n        let file\r\n        let formData = new FormData();\r\n\r\n        for( let i = 0; i < this.files.length; i++){\r\n            file = this.files[i];\r\n            formData.append('files[' + i + ']', file);\r\n        }// for\r\n\r\n        try {\r\n            const response = await axios({\r\n                method: 'post',\r\n                url: define.pathToAPI + '/multiupload/multiupload.php',\r\n                data: formData,\r\n                withCredentials: true, // определяет, должны ли создаваться кросс-доменные Access-Control запросы с использованием таких идентификационных данных как cookie, авторизационные заголовки или TLS сертификаты. Если здесь установили true, то на стороне бека нужно установить header(\"Access-Control-Allow-Credentials: true\")\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                },\r\n                onUploadProgress: function(progressEvent) {\r\n                    this.uploadPercentage = Math.round( (progressEvent.loaded * 100) / progressEvent.total )\r\n                }.bind(this)\r\n            })\r\n            // console.log('response: ', response);\r\n            \r\n            if(!response.data.uplFiles) {\r\n                // this.uploadPercentage = 0\r\n                this.pushNotify( notifys[this.lang].fileSaveError, 'notifyOrange')\r\n                // console.log('! Не получен response.data.uplFiles');\r\n                return\r\n            }\r\n\r\n            // проверка ответа от php файла\r\n            if(response.data) {\r\n                // // Включение заморозки действий\r\n                // this.$store.commit('SetFreeze', true)\r\n                // Если в newPics еще нет такого элемента, тогда добавляем\r\n                for( let j = 0; j < response.data.uplFiles.length; j++) {\r\n                    if (!this.newPics.includes(response.data.uplFiles[j])) {\r\n                        this.newPics.push(response.data.uplFiles[j]);\r\n                    }\r\n                }// for\r\n            } else {\r\n                console.log('Ошибка при передаче или сохранении файлов.\\nСервер отвечает (код 200). Но нет подтверждения от multiupload.php, что файлы сохранены')\r\n            }\r\n        } catch (e) {\r\n\r\n            if(e.code === 'ERR_NETWORK') {\r\n                // Нет подключения к серверу\r\n                this.pushNotify( notifys[this.lang].errNetwork, 'notifyOrange')\r\n                // console.log('Нет подключения к серверу')\r\n                return\r\n            }\r\n\r\n            // Обработка ошибок\r\n            switch(e.response.data.status) {\r\n                default:\r\n                    this.pushNotify( notifys[this.lang].defaultError, 'notifyOrange')\r\n                    console.log('Error: ' + e)\r\n                    break\r\n            } // switch\r\n        }// try\r\n        \r\n    },// submitFiles\r\n\r\n\r\n    // Подготовка к удалению картинки. Удаляю из стора и добавляю в массив picsToDelete - файлы, которые будут удалены (с сервера и базы, при сохранении FormUpdate)\r\n    preparePicToDelete( filename ) {\r\n        if( !filename && typeof filename !== 'string' ) {\r\n            console.log('Ошибка: filename не передан или не string [см. preparePicToDelete()]');\r\n            return }\r\n        // // Включение заморозки действий\r\n        // this.$store.commit('SetFreeze', true)\r\n        // Формируем массив без элемента filename\r\n        const filteredArr = this.$store.state.updProd.pictures.filter(item => item !== filename)\r\n        // \"Запоминаем\" файл (в массиве), чтобы удалить позже при сохранении FormUpdate\r\n        this.picsToDelete.push(filename)\r\n        // Сохраняем обновленный массив в сторе\r\n        this.$store.commit('UpdatePicsInDB', filteredArr)\r\n    },// preparePicToDelete\r\n\r\n\r\n    // Удаление файлов массива picsToDelete\r\n    delPicsToDelete() {\r\n        if(this.picsToDelete.length > 0) this.deleteFiles( this.picsToDelete )\r\n        // Очищаем массив\r\n        this.picsToDelete = []\r\n    },\r\n\r\n\r\n    // Удаление изображеняий, которые еще не сохранены в базе\r\n    // filesToBeDel - массив или строка (имена файлов)\r\n    // Если параметр не передан - удаляются все изображения (newPics), не сохраненные в базе\r\n    // deleteNewPics( filesToBeDel ) {\r\n    async deleteNewPics( filesToBeDel ) {\r\n        // Если массив newPics пуст - прерываем функцию (поскольку нечего удалять)\r\n        if(!this.newPics.length) return\r\n        // console.log('1) filesToBeDel: ', filesToBeDel)\r\n        // console.log('typeof: ', typeof filesToBeDel)\r\n\r\n        if( typeof filesToBeDel === 'string' ) filesToBeDel = [filesToBeDel] // Удалить filesToBeDel (с сервера и из массива newPics)\r\n        else filesToBeDel = this.newPics // Удалить все загруженные файлы (с сервера и из массива newPics)\r\n\r\n        // console.log('2) filesToBeDel: ', filesToBeDel);\r\n        // console.log('Удалить из newPics то что вернет deleteFiles() ');\r\n\r\n        let delResult = await this.deleteFiles( filesToBeDel )\r\n        // Если функция deleteFiles не вернула массив прекращаем выполнение.\r\n        if(!delResult) return\r\n        // ---------------------\r\n        // Если в newPics есть такой элемент, то удалем\r\n        for( let i = 0; i < delResult.length; i++) {\r\n            // фильтруем массив\r\n            this.newPics = this.newPics.filter(item => item !== delResult[i])\r\n        }// for\r\n\r\n        // Если newPics опустел - скрываем прогрессбар, очищаем input и т.п.\r\n        if(this.newPics.length === 0) this.hideBarAndClean()\r\n        // ---------------------\r\n    },// deleteNewPics\r\n\r\n\r\n    // Удаляет файлы (изображений) с диска сервера\r\n    // filesToBeDel - массив, обязательный параметр (список файлов, которые нужно удалить)\r\n    // Возвращает массив (имена файлов, удаление которых подтверждено сервером)\r\n    async deleteFiles( filesToBeDel ) {\r\n\r\n        if( !filesToBeDel || typeof filesToBeDel === 'string' ) {\r\n            console.log('Ошибка: функции deleteFiles не передан массив (обязательный параметр)')\r\n            return }\r\n\r\n        try {\r\n            // let context = this\r\n            const response = await axios({\r\n                method: 'post',\r\n                url: define.pathToAPI + '/multiupload/delete_uplfiles.php',\r\n                data: {\r\n                    filesToBeDel: filesToBeDel\r\n                },\r\n                withCredentials: true, // определяет, должны ли создаваться кросс-доменные Access-Control запросы с использованием таких идентификационных данных как cookie, авторизационные заголовки или TLS сертификаты. Если здесь установили true, то на стороне бека нужно установить header(\"Access-Control-Allow-Credentials: true\")\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                }\r\n            })// axios\r\n\r\n// #################################################\r\n// Заменить алерты на пушнотифай и в целом подправить, что можно (обработку ответа, ошибок)\r\n            // проверка ответа от php файла\r\n            if(response.data) {\r\n\r\n                if(response.data.doneFiles.length === 0) {\r\n                    console.log('~~~');\r\n                    console.log('Нет подтверждения от сервера');\r\n                    console.log('Комментарии: ', response.data.comments);\r\n                    console.log('response: ', response);\r\n                    console.log('~~~');\r\n                    // alert('Нет подтверждения от сервера (см. консоль)')\r\n                    return\r\n                }// if\r\n                \r\n                // Возвращаем список удаленных файлов\r\n                return response.data.doneFiles\r\n\r\n            } else {\r\n                // alert('Ошибка (см. консоль)')\r\n                console.log('Ошибка при передаче или сохранении файлов.\\nСервер отвечает (код 200). Но нет подтверждения от multiupload.php, что файлы сохранены')\r\n                return\r\n            }// if\r\n        } catch (e) {\r\n            console.log(e)\r\n            return\r\n        }// try\r\n// #################################################\r\n    },// deleteFiles\r\n\r\n\r\n    // Возврат элементов из picsToDelete в стор pictures\r\n    getBackFiles() {\r\n        if(this.picsToDelete.length > 0) this.$store.commit('AddToPicsInDB', this.picsToDelete)\r\n        // Очищаем массив\r\n        this.picsToDelete = []\r\n    },// getBackFiles\r\n\r\n\r\n    // Очистка массива файлов, скрытие прогресс-бара и очистка поля input\r\n    hideBarAndClean() {\r\n        // Очистка массива файлов\r\n        if(this.newPics.length > 0) this.newPics = []\r\n\r\n        const delay = 350 // ждем пока отработают transition у .fade  и .list (при transition .7s красиво с delay = 300 (350). То есть ~ половина transition)\r\n        const afterSmooth = 600 // Если у .smooth transition: .5s (500 мсек), то afterSmooth ставим немного больше. Например, 600 (мсек)\r\n        // Совет: для стилей .fade  и .list, нужно ставить одинаковую длительность transition. Чтобы переходы у списка и текста \"Загружены файлы\" отрабатывали синхронно.\r\n\r\n        setTimeout(() => { this.isInProgress = false }, delay);\r\n        this.$refs.files.value = ''\r\n        setTimeout(() => { this.uploadPercentage = 0 }, delay + afterSmooth);\r\n    },\r\n},// methods\r\n// watch: {\r\n//     // При снятии заморозки, удаляем несохраненные данные\r\n//     '$store.state.freeze': async function() {\r\n//     }\r\n// },// watch\r\n\r\nsetup() {\r\n    const { lang } = useLang()\r\n    const { pushNotify } = useNotify()\r\n\r\n    return { define, maxNameLength, lang, pushNotify }\r\n}\r\n\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n.picsArrBg {\r\n    max-width: 540px;\r\n    border: 0px solid #dbdbdb;\r\n    border-bottom: 1px dashed #b1b1b1;\r\n   \r\n    border-radius: 8px 8px 0 0;\r\n    background: #dfdfdf;\r\n}\r\n\r\n.graybg {\r\n    max-width: 540px;\r\n    border: 1px solid #cecece;\r\n    border-radius: 8px;\r\n    background: #f3f3f3;\r\n    margin-bottom: 30px;\r\n}\r\n\r\n.multiSelect {\r\n    padding-top: 15px;\r\n    padding-left: 15px;\r\n}\r\n\r\n.multiSelect input {\r\n    display: block;\r\n    font-weight: 400;\r\n    line-height: 1.5;\r\n    color: #212529;\r\n    background-clip: padding-box;\r\n    border: 1px solid #cecece;\r\n\r\n    border-radius: 8px 0 0 8px;\r\n}\r\n\r\ninput[type=file]::file-selector-button {\r\n    border-color: #00a2ff #00000000 #0077ff;\r\n    background: linear-gradient(#00a2ff, #0077ff) #0077ff;\r\n    color: white;\r\n    padding: 10px 12px;\r\n    border-radius: 8px 0 0 8px;\r\n}\r\n\r\ninput[type=file]::file-selector-button:hover {\r\n    border-color: #00a2ff #00000000 #0077ff;\r\n    background: linear-gradient(#00a2ff, #008cff) #0077ff;\r\n}\r\n\r\n.multiSelect button:disabled,\r\n.multiSelect button:disabled:hover {\r\n    border: 1px solid #bababa;\r\n    background: #e6e6e6;\r\n    color: #a6a6a6;\r\n    cursor: not-allowed;\r\n}\r\n.multiSelect button {\r\n    border-color: #00a2ff #00000000 #0077ff;\r\n    background: linear-gradient(#00a2ff, #0077ff) #0077ff;\r\n    color: white;\r\n    padding: 10px 12px;\r\n    border-radius: 0 8px 8px 0;\r\n    cursor: pointer;\r\n}\r\n\r\n.multiSelect button:hover {\r\n    border-color: #00a2ff #00000000 #0077ff;\r\n    background: linear-gradient(#00a2ff, #008cff) #0077ff;\r\n}\r\n\r\n\r\n\r\n.flex {\r\n    display: flex;\r\n    justify-content: space-between;\r\n}\r\n\r\n.flex input{\r\n    flex-grow: 1;\r\n}\r\n\r\n.progress {\r\n    display: flex;\r\n    height: 15px;\r\n    overflow: hidden;\r\n    background-color: #d8d8d8;\r\n    border-radius: 4px;\r\n    width: 300px;\r\n}\r\n\r\n.progress-bar {\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n    -ms-flex-direction: column;\r\n    flex-direction: column;\r\n    -ms-flex-pack: center;\r\n    justify-content: center;\r\n    overflow: hidden;\r\n    color: #fff;\r\n    text-align: center;\r\n    white-space: nowrap;\r\n    background-color: #28a745;\r\n    transition: width .6s ease;\r\n}\r\n\r\n.fade-enter-active, .fade-leave-active { transition: opacity .7s ease; }\r\n\r\n.fade-enter-from, .fade-leave-to { opacity: 0; }\r\n\r\n.list-item {\r\n  display: inline-block;\r\n  margin-right: 10px;\r\n}\r\n.list-enter-active,\r\n.list-leave-active {\r\n  transition: all .7s ease;\r\n}\r\n.list-enter-from,\r\n.list-leave-to {\r\n  opacity: 0;\r\n  transform: translateX(20px);\r\n}\r\n\r\n\r\n.flex-list {\r\n    list-style-type: none;\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: 7px;\r\n}\r\n\r\n.flex-list img.prev {\r\n    display: block;\r\n    object-fit: cover;\r\n    width: 40px;\r\n    height: 40px;\r\n    margin-right: 15px;\r\n    box-shadow: 0px 0px 4px #0000007e;\r\n    border-radius: 8px;\r\n    animation: 1.4s show ease;\r\n}\r\n\r\n@keyframes show {\r\n    0% { opacity: 0; }\r\n    100% { opacity: 1; }\r\n}\r\n\r\n.flex-list div {\r\n    margin-right: 15px;\r\n}\r\n\r\n\r\n\r\n.picName {\r\n    margin-right: 9px;\r\n}\r\n\r\n.picName a {\r\n    color: #006cc5;\r\n    text-decoration: none;\r\n}\r\n\r\n.picName a:hover {\r\n    color: #008afc;\r\n    text-decoration: underline;\r\n}\r\n\r\n.delPic {\r\n    padding: 2px;\r\n    border: 2px solid transparent;\r\n    border-radius: 20px;\r\n    transition: all .2s ease;\r\n}\r\n\r\n.delPic:hover {\r\n    cursor: pointer;\r\n    border: 2px solid transparent;\r\n    transform: scale(1.1);\r\n    background: #ffffff;\r\n}\r\n\r\n.delPic img {\r\n    display: block;\r\n}\r\n\r\n\r\n\r\n\r\n.smooth {\r\n    overflow: hidden;\r\n    transition: all .5s ease-in-out;\r\n    max-height: 0;\r\n    opacity: 0;\r\n}\r\n\r\n.smooth-show {\r\n    max-height: 100vh;\r\n    opacity: 1;\r\n}\r\n\r\n.orange {\r\n    font-weight: 700;\r\n    color: orangered;\r\n}\r\n\r\n</style>","export default {\r\n    en: {\r\n        errNetwork: 'English version of Notification<br>Нет подключения к серверу',\r\n        fileSaveError: 'English version of Notification<br>Ошибка. Возможно тип файла не поддерживается. Загружайте изображения JPG, PNG или GIF',\r\n        defaultError: \"English version of Notification<br>Возникла ошибка (подробности в консоли)\",\r\n    },\r\n    uk: {\r\n        errNetwork: 'Нет подключения к серверу',\r\n        fileSaveError: 'Ошибка. Возможно тип файла не поддерживается. Загружайте изображения JPG, PNG или GIF',\r\n        defaultError: 'Возникла ошибка (подробности в консоли)',\r\n    },\r\n}","import { render } from \"./MultiUpload.vue?vue&type=template&id=08435104\"\nimport script from \"./MultiUpload.vue?vue&type=script&lang=js\"\nexport * from \"./MultiUpload.vue?vue&type=script&lang=js\"\n\nimport \"./MultiUpload.vue?vue&type=style&index=0&id=08435104&lang=css\"\n\nimport exportComponent from \"E:\\\\OpenServer\\\\domains\\\\vue\\\\vue-catalog\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","_createElementVNode","_createElementBlock","_ctx","state","updProd","pictures","length","_Fragment","_renderList","item","key","includes","href","$setup","pathToUploads","target","rel","title","src","prevFolder2","alt","substr","_hoisted_5","onClick","$options","pathToGraphics","type","id","ref","accept","multiple","onChange","_hoisted_10","disabled","$data","$props","_hoisted_11","_hoisted_13","style","width","_createVNode","_Transition","name","_toDisplayString","_TransitionGroup","prevFolder","en","errNetwork","fileSaveError","defaultError","uk","props","uploadButton","String","default","uploadedFiles","data","files","newPics","picsToDelete","isInProgress","uploadPercentage","uplBtnBlock","methods","handleFilesUpload","this","$refs","async","file","formData","FormData","i","append","response","axios","method","url","define","withCredentials","headers","onUploadProgress","progressEvent","Math","round","loaded","total","bind","uplFiles","pushNotify","notifys","lang","j","push","console","log","e","code","status","preparePicToDelete","filename","filteredArr","$store","filter","commit","delPicsToDelete","deleteFiles","filesToBeDel","delResult","hideBarAndClean","Accept","doneFiles","comments","getBackFiles","delay","afterSmooth","setTimeout","value","setup","useLang","useNotify","maxNameLength","__exports__","render"],"sourceRoot":""}